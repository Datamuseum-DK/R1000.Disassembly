#!/usr/bin/env python3
#
# DIAG.M200_UCODE
#
# Source code fragment in R1000_Knowledge_Transfer_Manual pdf pg 132ff
#

class Details():

    def __init__(self, cx):
        self.cx = cx

        # Gleaned from R1000_Knowledge_Transfer_Manual pdf pg 132ff
        cx.m.set_label(0x0100, "DIAGNOSTIC_START")
        cx.m.set_label(0x0101, "END_DIAGNOSTIC_PASS")
        cx.m.set_label(0x0102, "COMPLETED_FULL_TEST")
        cx.m.set_label(0x0103, "NOT_FIRST_PASS")
        cx.m.set_label(0x0300, "START")
        cx.m.set_label(0x0301, "SCAVENGER_INIT")
        cx.m.set_label(0x030d, "START_VAL_TEST")
        cx.m.set_label(0x030f, "START_TYP_TEST")
        cx.m.set_label(0x0400, "VAL_TEST")
        cx.m.set_label(0x0403, "COND_FALSE_A")
        cx.m.set_label(0x0405, "COND_TRUE_A")

        # R1000_Knowledge_Transfer_Manual pdf pg 136
        cx.m.set_block_comment(0x0200, "0200 - 022D EVENTS")
        cx.m.set_block_comment(0x0300, "0300 - 0325 DIAGNOSTIC_DRIVER")
        cx.m.set_block_comment(0x0400, "0400 - 0B08 VAL_TEST")
        cx.m.set_block_comment(0x0c00, "0C00 - 1190 TYP_TEST")
        cx.m.set_block_comment(0x1300, "1300 - 169F CLASS_TEST")
        cx.m.set_block_comment(0x1800, "1800 - 1900 PRIVACY_TEST")
        cx.m.set_block_comment(0x1a00, "1A00 - 1C23 FIU_TEST")
        cx.m.set_block_comment(0x1e00, "1E00 - 22DD SEQ_TEST")
        cx.m.set_block_comment(0x2400, "2400 - 2734 MEM_TEST")
        cx.m.set_block_comment(0x2800, "2800 - 29F7 MEM_TEST_TWO")
        cx.m.set_block_comment(0x2b00, "2B00 - 2C32 CSA_TEST")
        cx.m.set_block_comment(0x2e00, "2E00 - 2ECE SYS_IOC_TEST")
        cx.m.set_block_comment(0x3000, "3000 - 32AA RF_TEST")

        # Gleaned from R1000_Knowledge_Transfer_Manual pdf pg 132ff
        cx.m.set_label(0x0100, "DIAGNOSTIC_START")
        cx.m.set_label(0x0101, "END_DIAGNOSTIC_PASS")
        cx.m.set_label(0x0102, "COMPLETED_FULL_TEST")
        cx.m.set_label(0x0103, "NOT_FIRST_PASS")
        cx.m.set_label(0x0300, "START")
        cx.m.set_label(0x0301, "SCAVENGER_INIT")
        cx.m.set_label(0x030d, "START_VAL_TEST")
        cx.m.set_label(0x030f, "START_TYP_TEST")
        cx.m.set_label(0x0400, "VAL_TEST")
        cx.m.set_label(0x0403, "COND_FALSE_A")
        cx.m.set_label(0x0405, "COND_TRUE_A")

        # R1000_Knowledge_Transfer_Manual pdf pg 137ff
        cx.m.set_label(0x0ADB, "COND_ERROR")		# also pg 135
        cx.m.set_label(0x0ADD, "REG_FILE_ERROR")
        cx.m.set_label(0x0ADF, "LOGICAL_ALU_ERROR")
        cx.m.set_label(0x0AE1, "ARITH_ALU_ERROR")
        cx.m.set_label(0x0AE3, "COND_ALU_ERROR")
        cx.m.set_label(0x0AE5, "SPLIT_ALU_ERROR")
        cx.m.set_label(0x0AE7, "A_PORT_ZERO_ERROR")
        cx.m.set_label(0x0AE9, "LOOP_ERROR")
        cx.m.set_label(0x0AEB, "CMUX_PASS_ERROR")
        cx.m.set_label(0x0AED, "CMUX_LEFT_ERROR")
        cx.m.set_label(0x0AEF, "CMUX_RIGHT_ERROR")
        cx.m.set_label(0x0AF1, "CMUX_WDR_ERROR")	# also pg 135
        cx.m.set_label(0x0AF3, "CMUX_FIU_ERROR")
        cx.m.set_label(0x0AF5, "FIU_HIGH_ERROR")
        cx.m.set_label(0x0AF7, "FIU_LOW_ERROR")
        cx.m.set_label(0x0AF9, "FIU_COND_ERROR")
        cx.m.set_label(0x0AFB, "ZERO_COUNT_ERROR")
        cx.m.set_label(0x0AFD, "ZERO_COND_ERROR")
        cx.m.set_label(0x0AFF, "REG_A_B_ERROR")
        cx.m.set_label(0x0B01, "MULT_ERROR")
        cx.m.set_label(0x0B03, "DIV_ERROR")
        cx.m.set_label(0x0B05, "VAL_BUS_ERROR")
        cx.m.set_label(0x0B07, "IMMEDIATE_OP_ERROR")
        cx.m.set_label(0x1165, "COND_ERROR")
        cx.m.set_label(0x1167, "REG_FILE_ERROR")
        cx.m.set_label(0x1169, "LOGICAL_ALU_ERROR")
        cx.m.set_label(0x116B, "ARITH_ALU_ERROR")
        cx.m.set_label(0x116D, "COND_ALU_ERROR")
        cx.m.set_label(0x116F, "SPLIT_ALU_ERROR")
        cx.m.set_label(0x1171, "LOOP_ERROR")
        cx.m.set_label(0x1173, "CMUX_PASS_ERROR")
        cx.m.set_label(0x1175, "CMUX_WDR_ERROR")
        cx.m.set_label(0x1177, "CMUX_FIU_ERROR")
        cx.m.set_label(0x1179, "ZERO_COND_ERROR")
        cx.m.set_label(0x117B, "BIT_21_ERROR")
        cx.m.set_label(0x117D, "BIT_32_ERROR")
        cx.m.set_label(0x117F, "BIT_33_ERROR")
        cx.m.set_label(0x1181, "BIT_34_ERROR")
        cx.m.set_label(0x1183, "BIT_35_ERROR")
        cx.m.set_label(0x1185, "BIT_36_ERROR")
        cx.m.set_label(0x1187, "BIT_33_34_36_ERROR")
        cx.m.set_label(0x1189, "CARRY_IN_ERROR")
        cx.m.set_label(0x118B, "FIU_HIGH_ERROR")
        cx.m.set_label(0x118D, "FIU_LOW_ERROR")
        cx.m.set_label(0x118F, "REG_A_B_ERROR")
        cx.m.set_label(0x1696, "A_EQ_L_FAILED")
        cx.m.set_label(0x1698, "B_EQ_L_FAILED")
        cx.m.set_label(0x169A, "A_EQ_B_FAILED")
        cx.m.set_label(0x169C, "CLASS_EVENT_FAILED")
        cx.m.set_label(0x169E, "OF_KIND_ERROR")
        cx.m.set_label(0x18F1, "PRIVACY_A_FAILED")
        cx.m.set_label(0x18F3, "PRIVACY_B_FAILED")
        cx.m.set_label(0x18F5, "PRIVACY_NAMES_EQ_FAILED")
        cx.m.set_label(0x18F7, "PRIVACY_A_B_FAILED")
        cx.m.set_label(0x18F9, "PRIVACY_EQ_FAILED")
        cx.m.set_label(0x18FB, "PRIVACY_STRUCTURE_FAILED")
        cx.m.set_label(0x18FD, "PRIVACY_PATHS_EQ_FAILED")
        cx.m.set_label(0x18FF, "PRIVACY_CHECKER_ERROR")
        cx.m.set_label(0x1BFE, "OFFSET_ERROR")
        cx.m.set_label(0x1C00, "LENGTH_ERROR")
        cx.m.set_label(0x1C02, "XWORD_ERROR")
        cx.m.set_label(0x1C04, "MAR_WORD_EQ_ZERO_ERROR")
        cx.m.set_label(0x1C06, "VAR_ERROR")
        cx.m.set_label(0x1C08, "TAR_ERROR")
        cx.m.set_label(0x1C0A, "MDR_ERROR")
        cx.m.set_label(0x1C0C, "VI_MUX_FIU_ERROR")
        cx.m.set_label(0x1C0E, "MERGE_V_MUX_FIU_ERROR")
        cx.m.set_label(0x1C10, "TI_MUX_FIU_ERROR")
        cx.m.set_label(0x1C12, "FILL_BIT_ERROR")
        cx.m.set_label(0x1C14, "MERGER_EXTRACT_ERROR")
        cx.m.set_label(0x1C16, "MERGER_INSERT_V_ERROR")
        cx.m.set_label(0x1C18, "MERGER_INSERT_T_ERROR")
        cx.m.set_label(0x1C1A, "MERGER_INSERT_ERROR")
        cx.m.set_label(0x1C1C, "ROTATE_ERROR")
        cx.m.set_label(0x1C20, "EXTRACT_ERROR")
        cx.m.set_label(0x1C22, "INSERT_ERROR")
        cx.m.set_label(0x2061, "FAILED_DISPATCH")
        cx.m.set_label(0x2066, "BAD_OPTIMIZATION_ERROR")
        cx.m.set_label(0x20F6, "BAD_USUALLY_DISPATCH")
        cx.m.set_label(0x226B, "BREAK_ERROR")
        cx.m.set_label(0x226C, "COND_ERROR")
        cx.m.set_label(0x20FA, "UNSUCCESSFUL_USUALLY_CASE")
        cx.m.set_label(0x20FE, "WRONG_CASE_VALUE")
        cx.m.set_label(0x226B, "BREAK_ERROR")
        cx.m.set_label(0x226C, "COND_ERROR")
        cx.m.set_label(0x226E, "BAD_MACRO_PC")
        cx.m.set_label(0x2270, "BAD_LEX_VAL")
        cx.m.set_label(0x2272, "BAD_MACRO_PC_REF")
        cx.m.set_label(0x2274, "BAD_MACRO_PC_SEG")
        cx.m.set_label(0x2276, "BAD_CODE_MUX")
        cx.m.set_label(0x2278, "BAD_MACRO_PC_IND")
        cx.m.set_label(0x227A, "BAD_MACRO_PC_ADD")
        cx.m.set_label(0x227C, "BAD_RETURN_PC")
        cx.m.set_label(0x227E, "BAD_RETURN_PC_REF")
        cx.m.set_label(0x2280, "BAD_RETURN_PC_SEG")
        cx.m.set_label(0x2282, "BAD_RETURN_PC_LOAD")
        cx.m.set_label(0x2284, "BAD_CONTROL_PRED")
        cx.m.set_label(0x2286, "BAD_CONTROL_TOP")
        cx.m.set_label(0x2288, "BAD_SEQUENCER_BUS")
        cx.m.set_label(0x228A, "BAD2_CONTROL_PRED")
        cx.m.set_label(0x228C, "BAD2_CONTROL_TOP")
        cx.m.set_label(0x228E, "BAD_CONTROL_TOP_INC")
        cx.m.set_label(0x2290, "BAD_CONTROL_TOP_DEC")
        cx.m.set_label(0x2292, "BAD_RESOLVE")
        cx.m.set_label(0x2294, "VALIDATE_BAD")
        cx.m.set_label(0x2296, "BAD_RESOLVE2")
        cx.m.set_label(0x2298, "BAD_RESOLVE_ADDRESS")
        cx.m.set_label(0x229A, "VALIDATE_BAD2")
        cx.m.set_label(0x229C, "BAD_INVALIDATE")
        cx.m.set_label(0x229E, "BAD_CURRENT_INSTR")
        cx.m.set_label(0x22A0, "BAD_CURRENT_INSTR1")
        cx.m.set_label(0x22A2, "BAD_IBUFFER")
        cx.m.set_label(0x22A4, "BAD_IBUFFER2")
        cx.m.set_label(0x22A6, "BAD_IBUFFER3")
        cx.m.set_label(0x22A8, "BAD_SAVE_OFFSET")
        cx.m.set_label(0x22AA, "BAD_CURRENT_NAME")
        cx.m.set_label(0x22AC, "BAD2_SAVE_OFFSET")
        cx.m.set_label(0x22AE, "BAD2_CURRENT_NAME")
        cx.m.set_label(0x22B0, "BAD_NUMBER_VALID")
        cx.m.set_label(0x22B2, "BAD_NUMBER_VALID2")
        cx.m.set_label(0x22B4, "BAD_NUMBER_VALID3")
        cx.m.set_label(0x22B6, "BAD_NUMBER_VALID4")
        cx.m.set_label(0x22B8, "BAD_DISPATCH_ZERO")
        cx.m.set_label(0x22BA, "BAD_DISPATCH_ONE")
        cx.m.set_label(0x22BC, "PC_UPDATE_ERROR")
        cx.m.set_label(0x22BE, "IBUFF_FILL_ERROR")
        cx.m.set_label(0x22C0, "DISPATCH_INDEX_ERROR")
        cx.m.set_label(0x22C2, "IFILL_ERROR")
        cx.m.set_label(0x22C4, "BAD_CONDITIONA_LOAD_IBUFF")
        cx.m.set_label(0x22C6, "BAD_CONDITIONA_LOAD_IBUFF2")
        cx.m.set_label(0x22C8, "TOS_VALIDATE_FAILED")
        cx.m.set_label(0x22CA, "TOS_LATCH_DIDNT_HOLD")
        cx.m.set_label(0x22CC, "DISPATCH_DIDNT_INVALIDATE")
        cx.m.set_label(0x22CE, "DIDNT_TAKE_MICRO_EVENT")
        cx.m.set_label(0x22D0, "FIELD_NUMBER_TEST_FAILED")
        cx.m.set_label(0x22D2, "NVE_ERROR")
        cx.m.set_label(0x22D4, "NFREE_ERROR")
        cx.m.set_label(0x22D6, "RES_REF_ERROR")
        cx.m.set_label(0x22D7, "RES_REF_ERROR_1")
        cx.m.set_label(0x22D9, "TOS_OP_ERROR")
        cx.m.set_label(0x22DA, "TOS_OP_ERROR_ONE")
        cx.m.set_label(0x22DC, "MICRO_STACK_ERROR")
        cx.m.set_label(0x2727, "INIT_ERROR")
        cx.m.set_label(0x2729, "MAR_ERROR")
        cx.m.set_label(0x272B, "MEM_BOARDS_NOT_ALL_SAME_SIZE")
        cx.m.set_label(0x272D, "TAG_STORE_DATA_ERROR")
        cx.m.set_label(0x272F, "HASH_ERROR")
        cx.m.set_label(0x2731, "TAG_STORE_COMPARE_ERROR")
        cx.m.set_label(0x2733, "RAM_PLANE_DATA_ERROR")
        cx.m.set_label(0x29D8, "FLAG_ERROR")
        cx.m.set_label(0x29DA, "E_ABORT_ERROR")
        cx.m.set_label(0x29DC, "READ_ERROR")
        cx.m.set_label(0x29DE, "PAGE_ERROR")
        cx.m.set_label(0x29E0, "COND_ERROR")
        cx.m.set_label(0x29E2, "FRAME_ERROR")
        cx.m.set_label(0x29E4, "PAGE_XING_ERROR")
        cx.m.set_label(0x29E6, "INIT_ERROR")
        cx.m.set_label(0x29E8, "LRU_MRU_ERROR")
        cx.m.set_label(0x29EA, "COND_CONT_ERROR")
        cx.m.set_label(0x29EC, "LOGICAL_ERROR")
        cx.m.set_label(0x29EE, "TVR_ERROR")
        cx.m.set_label(0x29F0, "VERIFY_ERROR")
        cx.m.set_label(0x29F2, "ECC_EVENT_NOT_TAKEN")
        cx.m.set_label(0x29F4, "ECC_ERROR")
        cx.m.set_label(0x29F6, "AVAIL_ERROR")
        cx.m.set_label(0x2C19, "ERROR_HALT")
        cx.m.set_label(0x2C1B, "CSA_HIT_ERROR")
        cx.m.set_label(0x2C1D, "OUT_OF_RANGE_ERROR")
        cx.m.set_label(0x2C1F, "CSA_INIT_ERROR")
        cx.m.set_label(0x2C21, "CSA_READ_ERROR")
        cx.m.set_label(0x2C23, "CSA_WRITE_ERROR")
        cx.m.set_label(0x2C25, "MEM_ERROR")
        cx.m.set_label(0x2C27, "BAD_HINT_ERROR")
        cx.m.set_label(0x2C29, "CANNOT_ALIGN_BOT_ERROR")
        cx.m.set_label(0x2C2B, "TYP_VAL_BOT_UNEQUAL_ERROR")
        cx.m.set_label(0x2C2D, "DEC_CSA_BOT_ERROR")
        cx.m.set_label(0x2C2F, "INC_CSA_BOT_ERROR")
        cx.m.set_label(0x2C31, "CSA_BOTM1_ERROR")
        cx.m.set_label(0x2EC7, "TIMER_ERROR")
        cx.m.set_label(0x2EC9, "TIMER_COUNT_ERROR")
        cx.m.set_label(0x2ECB, "SLICE_MACRO_EVENT_ERROR")
        cx.m.set_label(0x2ECD, "GP_MACRO_EVENT_ERROR")
        cx.m.set_label(0x3241, "VAL_INC_FAILED")
        cx.m.set_label(0x3243, "TYP_COUNTER_ERROR")
        cx.m.set_label(0x3245, "TYP_INC_FAILED")
        cx.m.set_label(0x3247, "VAL_ALU_ZERO_CHECK_FAILED")
        cx.m.set_label(0x3249, "VAL_ALU_ONES_CHECK_FAILED")
        cx.m.set_label(0x324B, "VAL_REG_COMPARE_FAILED")
        cx.m.set_label(0x324D, "VAL_REG_INC_FAILED")
        cx.m.set_label(0x324F, "VAL_INC_A_FAILED")
        cx.m.set_label(0x3251, "VAL_START_BIT64_ERROR")
        cx.m.set_label(0x3253, "VAL_BIT64_ERROR")
        cx.m.set_label(0x3255, "VAL_FINAL_BIT64_ERROR")
        cx.m.set_label(0x3257, "VAL_START_ALU_NE_0_ERROR")
        cx.m.set_label(0x3259, "VAL_ALU_NE_0_ERROR")
        cx.m.set_label(0x325B, "VAL_FINAL_ALU_NE_0_ERROR")
        cx.m.set_label(0x325D, "TYP_ALU_ZERO_CHECK_FAILED")
        cx.m.set_label(0x325F, "TYP_ALU_ONES_CHECK_FAILED")
        cx.m.set_label(0x3261, "TYP_REG_COMPARE_FAILED")
        cx.m.set_label(0x3263, "TYP_REG_INC_FAILED")
        cx.m.set_label(0x3265, "TYP_INC_A_FAILED")
        cx.m.set_label(0x3267, "TYP_START_BIT64_ERROR")
        cx.m.set_label(0x3269, "TYP_BIT64_ERROR")
        cx.m.set_label(0x326B, "TYP_FINAL_BIT64_ERROR")
        cx.m.set_label(0x326D, "TYP_START_ALU_NE_0_ERROR")
        cx.m.set_label(0x326F, "TYP_ALU_NE_0_ERROR")
        cx.m.set_label(0x3271, "TYP_FINAL_ALU_NE_0_ERROR")
        cx.m.set_label(0x3273, "TYP_A_SIDE_ZERO_ERROR")
        cx.m.set_label(0x3275, "TYP_B_SIDE_ZERO_ERROR")
        cx.m.set_label(0x3277, "TYP_A_B_ZERO_ERROR")
        cx.m.set_label(0x3279, "VAL_A_SIDE_ZERO_ERROR")
        cx.m.set_label(0x327B, "VAL_B_SIDE_ZERO_ERROR")
        cx.m.set_label(0x327D, "VAL_A_B_ZERO_ERROR")
        cx.m.set_label(0x327F, "TYP_A_SIDE_ONES_ERROR")
        cx.m.set_label(0x3281, "TYP_B_SIDE_ONES_ERROR")
        cx.m.set_label(0x3283, "TYP_A_B_ONES_ERROR")
        cx.m.set_label(0x3285, "VAL_A_SIDE_ONES_ERROR")
        cx.m.set_label(0x3287, "VAL_B_SIDE_ONES_ERROR")
        cx.m.set_label(0x3289, "VAL_A_B_ONES_ERROR")
        cx.m.set_label(0x328B, "TYP_COUNTER_CONTENTS_ERROR")
        cx.m.set_label(0x328D, "TYP_COMPARE_ERROR")
        cx.m.set_label(0x328F, "VAL_COUNTER_CONTENTS_ERROR")
        cx.m.set_label(0x3291, "VAL_COMPARE_ERROR")
        cx.m.set_label(0x3293, "VAL_REG_BAD_LOAD")
        cx.m.set_label(0x3295, "VAL_NIBBLE_ERROR")
        cx.m.set_label(0x3297, "TYP_REG_BAD_LOAD")
        cx.m.set_label(0x3299, "TYP_NIBBLE_ERROR")
        cx.m.set_label(0x329B, "VAL_A_SIDE_ADDR_ERROR")
        cx.m.set_label(0x329D, "VAL_A_SIDE_FRAME_ERROR")
        cx.m.set_label(0x329F, "VAL_B_SIDE_ADDR_ERROR")
        cx.m.set_label(0x32A1, "VAL_B_SIDE_FRAME_ERROR")
        cx.m.set_label(0x32A3, "TYP_A_SIDE_ADDR_ERROR")
        cx.m.set_label(0x32A5, "TYP_A_SIDE_FRAME_ERROR")
        cx.m.set_label(0x32A7, "TYP_B_SIDE_ADDR_ERROR")
        cx.m.set_label(0x32A9, "TYP_B_SIDE_FRAME_ERROR")
